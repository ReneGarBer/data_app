name: Workflow for app1

on:
  push:
    branches:
      - '!main'
      - 'dbt_app/**'
      - '!extract_app/**'

    paths:
      - '!.github/**'
      - '!apps/extract_app/**'
      - '!environments/dev/extract_app/**'
      - 'apps/dbt_app/**'

jobs:
  code_test:
    name: Code test
    runs-on: ubuntu-latest
    outputs:
      not_failures: ${{steps.run_tests.outputs.not_failures}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Change to your project's Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/dbt_app/requirements.txt

      - name: Run tests and capture output
        id: run_tests
        run: |
          dbt debug -t stg > result.log || true

          if grep -q "FAILURES" result.log; then
            echo "not_failures=false" >> "$GITHUB_OUTPUT"
          else
            echo "not_failures=true" >> "$GITHUB_OUTPUT"
          fi

          RESULT=$(cat result.log)
          echo "test_output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$RESULT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        env:
          PGHOST: ${{ secrets.PGHOST }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGPORT: ${{ secrets.PGPORT }}
          PGUSERSTG:  ${{ secrets.PGUSERSTG }}
          PGPASSWORDSTG:  ${{ secrets.PGPASSWORDSTG }}
          PGUSERRFND: ${{ secrets.PGUSERRFND }}
          PGPASSWORDRFND: ${{ secrets.PGPASSWORDRFND }}
          PGUSERANLST:  ${{ secrets.PGUSERANLST }}
          PGPASSWORDANLST:  ${{ secrets.PGUSERANLST }}

      - name: Send email with test results
        if: steps.run_tests.outputs.not_failures == 'false'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ Pytest Failures for Commit ${{ github.sha }}"
          to: renegarciabernal.rg@gmail.com #replace with team emails
          from: GitHub CI Bot <${{ secrets.EMAIL_USERNAME }}>
          body: |
            Hello,

            Here are the test results from GitHub Actions:

            ${{ steps.run_tests.outputs.test_output }}

  create_and_merge_pr:
    name: Create and auto-merge PR to main if tests pass
    needs: code_test
    if: needs.code_test.outputs.not_failures == 'true'
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PUSH_TOKEN }}
          commit-message: "✅ Auto PR: Tests passed for `${{ github.ref_name }}`"
          base: main
          branch: ${{ github.ref_name }}
          title: "Auto PR: Merge `${{ github.ref_name }}` to `main`"
          body: |
            This pull request was automatically created because all tests passed.
          labels: automerge

      - name: Enable Auto-Merge
        if: steps.cpr.outputs.pull-request-number != 0
        run:  |
          echo "${{ steps.cpr.outputs.pull-request-number }}"
        # uses: peter-evans/enable-pull-request-automerge@v2
        # with:
        #   token: ${{ secrets.GH_PUSH_TOKEN }}
        #   pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
        #   merge-method: merge  # Puedes usar: merge, squash o rebase

